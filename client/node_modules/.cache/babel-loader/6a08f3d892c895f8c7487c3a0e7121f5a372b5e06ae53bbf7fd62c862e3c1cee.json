{"ast":null,"code":"// import React, { useState, useRef } from 'react'\n// import CurrentMenu from './CurrentMenu';\n// import Menues from './Menues';\n// import { menu as fullMenu } from './restaurantMenu.ts';\n\n// function sendHttpGetRequest(url, callback) {\n//     let httpRequest = new XMLHttpRequest();\n//     httpRequest.onreadystatechange = () => {\n//         if (httpRequest.readyState == 4) {\n//             if (httpRequest.status == 200) {\n//                 callback(httpRequest.responseText);\n//             }\n//         }\n//     };\n//     httpRequest.open('GET', url, true);\n//     httpRequest.send();\n// }\n\n// export default function FullMenu(props) {\n\n//     const [menuToShow, setMenuToShow] = useState(0);\n\n//     // Create a ref to store the references to the menu sections\n//     const menuRefs = useRef([]);\n\n//     const handleSetMenu = (titleIndex) => {\n//         setMenuToShow(titleIndex);\n\n//         // Scroll to the selected menu\n//         if (menuRefs.current[titleIndex]) {\n//             menuRefs.current[titleIndex].scrollIntoView({ behavior: 'smooth', block: 'start' });\n//         }\n//     }\n\n//     const [value, setValue] = useState(\"no value\");\n\n//     let getValue = () => {\n//         sendHttpGetRequest('http://localhost:8080/api', (res) => {\n//             setValue(res);\n//             console.log('res: ', res)\n//         })\n//         console.log('get value is clicked: ', value)\n//     }\n\n//     return (\n//         <div id=\"full_menu_div\" className=\"horizontal_container\">\n//             <Menues titles={fullMenu.map(menu => menu.title)} indexToShow={menuToShow} chooseMenu={handleSetMenu}></Menues>\n\n//             <div id=\"full_menu\" className=\"vertical_container scrollbar\">\n// {/* ///////////////////////////////////////////////////////////////////////////////// */}\n//                 {/* <button onClick={() => { getValue() }}>im a button</button> */}\n\n//                 {\n//                     fullMenu.map((menu, index) => {\n//                         return (\n//                             <div\n//                                 style={{ display: 'flex', justifyContent: 'center' }}\n//                                 key={'divMenu' + index}\n//                                 // Store the ref for each menu\n//                                 ref={el => menuRefs.current[index] = el}\n//                             >\n//                                 <CurrentMenu\n//                                     key={menu.title}\n//                                     menuIndex={index}\n//                                     menu={menu}\n//                                     open={props.open}\n//                                     close={props.close} />\n//                             </div>\n//                         )\n//                     })\n//                 }\n\n//             </div>\n\n//         </div>\n//     )\n// }","map":{"version":3,"names":[],"sources":["C:/Users/nisim/Desktop/digital_menu_front_and_back/client/src/components/FullMenu.jsx"],"sourcesContent":["// import React, { useState, useRef } from 'react'\r\n// import CurrentMenu from './CurrentMenu';\r\n// import Menues from './Menues';\r\n// import { menu as fullMenu } from './restaurantMenu.ts';\r\n\r\n// function sendHttpGetRequest(url, callback) {\r\n//     let httpRequest = new XMLHttpRequest();\r\n//     httpRequest.onreadystatechange = () => {\r\n//         if (httpRequest.readyState == 4) {\r\n//             if (httpRequest.status == 200) {\r\n//                 callback(httpRequest.responseText);\r\n//             }\r\n//         }\r\n//     };\r\n//     httpRequest.open('GET', url, true);\r\n//     httpRequest.send();\r\n// }\r\n\r\n\r\n// export default function FullMenu(props) {\r\n\r\n//     const [menuToShow, setMenuToShow] = useState(0);\r\n\r\n//     // Create a ref to store the references to the menu sections\r\n//     const menuRefs = useRef([]);\r\n\r\n//     const handleSetMenu = (titleIndex) => {\r\n//         setMenuToShow(titleIndex);\r\n\r\n//         // Scroll to the selected menu\r\n//         if (menuRefs.current[titleIndex]) {\r\n//             menuRefs.current[titleIndex].scrollIntoView({ behavior: 'smooth', block: 'start' });\r\n//         }\r\n//     }\r\n\r\n//     const [value, setValue] = useState(\"no value\");\r\n\r\n//     let getValue = () => {\r\n//         sendHttpGetRequest('http://localhost:8080/api', (res) => {\r\n//             setValue(res);\r\n//             console.log('res: ', res)\r\n//         })\r\n//         console.log('get value is clicked: ', value)\r\n//     }\r\n\r\n//     return (\r\n//         <div id=\"full_menu_div\" className=\"horizontal_container\">\r\n//             <Menues titles={fullMenu.map(menu => menu.title)} indexToShow={menuToShow} chooseMenu={handleSetMenu}></Menues>\r\n\r\n//             <div id=\"full_menu\" className=\"vertical_container scrollbar\">\r\n// {/* ///////////////////////////////////////////////////////////////////////////////// */}\r\n//                 {/* <button onClick={() => { getValue() }}>im a button</button> */}\r\n\r\n//                 {\r\n//                     fullMenu.map((menu, index) => {\r\n//                         return (\r\n//                             <div\r\n//                                 style={{ display: 'flex', justifyContent: 'center' }}\r\n//                                 key={'divMenu' + index}\r\n//                                 // Store the ref for each menu\r\n//                                 ref={el => menuRefs.current[index] = el}\r\n//                             >\r\n//                                 <CurrentMenu\r\n//                                     key={menu.title}\r\n//                                     menuIndex={index}\r\n//                                     menu={menu}\r\n//                                     open={props.open}\r\n//                                     close={props.close} />\r\n//                             </div>\r\n//                         )\r\n//                     })\r\n//                 }\r\n                \r\n//             </div>\r\n\r\n//         </div>\r\n//     )\r\n// }"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}