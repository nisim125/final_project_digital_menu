{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nisim\\\\Desktop\\\\digital_menu_front_and_back\\\\client\\\\src\\\\components\\\\EditedItemContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditedItemContext = /*#__PURE__*/createContext();\nexport const EditedItemProvider = ({\n  children\n}) => {\n  _s();\n  const [itemState, setItemState] = useState({\n    item: {},\n    menuTitle: \"\",\n    quantity: 1,\n    isEditMode: false,\n    indexInCart: -1,\n    newPrice: -1\n  });\n  const updateEditItemState = (key, value) => {\n    setItemState(prevState => ({\n      ...prevState,\n      [key]: value\n    }));\n  };\n  const resetEditItemState = () => {\n    setItemState({\n      item: {},\n      menuTitle: \"\",\n      quantity: 1,\n      isEditMode: false,\n      indexInCart: -1,\n      newPrice: -1\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(EditedItemContext.Provider, {\n    value: {\n      itemState,\n      setItemState,\n      updateEditItemState,\n      resetEditItemState\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(EditedItemProvider, \"Gw3jdxEK143eycZhq/I7GYpZ7+4=\");\n_c = EditedItemProvider;\nexport const useItemContext = () => {\n  _s2();\n  return useContext(EditedItemContext);\n};\n\n// // createContext: To create a new context object\n// // useState: For managing state within the context\n// // useContext: A hook to consume the context in other components\n// import React, { createContext, useState, useContext, useEffect } from 'react';\n\n// // creates a new context object.\n// // We'll use this to provide and consume the global state.\n// const EditedItemContext = createContext();\n\n// // This defines a component that will wrap your app and provide the context.\n// // It takes children as a prop, which will be the components wrapped by this provider.\n// export const EditedItemProvider = ({ children }) => {\n//   // Set up the state for the global context using the useState hook.\n//   // The initial state is an object with properties.\n//   const [itemState, setItemState] = useState({ item: {}, menuTitle: \"\", newPrice: -1, quantity: 1 , isEditMode:false});\n\n//   // This function allows updating a specific key in the global state.\n//   // It uses the spread operator to maintain existing state and only update the specified key.\n//   const updateEditItemState = (key, value) => {\n//     setItemState((prevState) => ({\n//       ...prevState,\n//       [key]: value,\n//     }));\n//   };\n\n//   const resetEditItemState = () => { setItemState({ item: {}, menuTitle: \"\", newPrice: -1, quantity: 1 , isEditMode:false}) };\n\n//   // This returns the context provider component, passing the state and update function as the context value.\n//   // The children prop allows this to wrap other components.\n//   return (\n//     <EditedItemContext.Provider\n//       value={{\n//         itemState,\n//         updateEditItemState,\n//         resetEditItemState\n//       }}\n//     >\n//       {children}\n//     </EditedItemContext.Provider>\n//   );\n// };\n\n// // This custom hook provides an easy way to consume the context in other components.\n// // This structure creates a reusable, global state management system using React's Context API.\n// // It allows components to access and modify shared state without prop drilling.\n// export const useItemContext = () => useContext(EditedItemContext);\n_s2(useItemContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"EditedItemProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","EditedItemContext","EditedItemProvider","children","_s","itemState","setItemState","item","menuTitle","quantity","isEditMode","indexInCart","newPrice","updateEditItemState","key","value","prevState","resetEditItemState","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useItemContext","_s2","$RefreshReg$"],"sources":["C:/Users/nisim/Desktop/digital_menu_front_and_back/client/src/components/EditedItemContext.jsx"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\n\r\nconst EditedItemContext = createContext();\r\n\r\nexport const EditedItemProvider = ({ children }) => {\r\n\r\n  const [itemState, setItemState] = useState({\r\n    item: {},\r\n    menuTitle: \"\",\r\n    quantity: 1,\r\n    isEditMode: false,\r\n    indexInCart: -1,\r\n    newPrice: -1\r\n  });\r\n\r\n  const updateEditItemState = (key, value) => {\r\n    setItemState((prevState) => ({\r\n      ...prevState,\r\n      [key]: value,\r\n    }));\r\n  };\r\n\r\n  const resetEditItemState = () => {\r\n    setItemState({\r\n      item: {},\r\n      menuTitle: \"\",\r\n      quantity: 1,\r\n      isEditMode: false,\r\n      indexInCart: -1,\r\n      newPrice: -1\r\n    })\r\n  };\r\n\r\n  return (\r\n    <EditedItemContext.Provider\r\n      value={{\r\n        itemState,\r\n        setItemState,\r\n        updateEditItemState,\r\n        resetEditItemState\r\n      }}\r\n    >\r\n      {children}\r\n    </EditedItemContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useItemContext = () => useContext(EditedItemContext);\r\n\r\n\r\n\r\n\r\n\r\n// // createContext: To create a new context object\r\n// // useState: For managing state within the context\r\n// // useContext: A hook to consume the context in other components\r\n// import React, { createContext, useState, useContext, useEffect } from 'react';\r\n\r\n// // creates a new context object.\r\n// // We'll use this to provide and consume the global state.\r\n// const EditedItemContext = createContext();\r\n\r\n// // This defines a component that will wrap your app and provide the context.\r\n// // It takes children as a prop, which will be the components wrapped by this provider.\r\n// export const EditedItemProvider = ({ children }) => {\r\n//   // Set up the state for the global context using the useState hook.\r\n//   // The initial state is an object with properties.\r\n//   const [itemState, setItemState] = useState({ item: {}, menuTitle: \"\", newPrice: -1, quantity: 1 , isEditMode:false});\r\n\r\n//   // This function allows updating a specific key in the global state.\r\n//   // It uses the spread operator to maintain existing state and only update the specified key.\r\n//   const updateEditItemState = (key, value) => {\r\n//     setItemState((prevState) => ({\r\n//       ...prevState,\r\n//       [key]: value,\r\n//     }));\r\n//   };\r\n\r\n//   const resetEditItemState = () => { setItemState({ item: {}, menuTitle: \"\", newPrice: -1, quantity: 1 , isEditMode:false}) };\r\n\r\n//   // This returns the context provider component, passing the state and update function as the context value.\r\n//   // The children prop allows this to wrap other components.\r\n//   return (\r\n//     <EditedItemContext.Provider\r\n//       value={{\r\n//         itemState,\r\n//         updateEditItemState,\r\n//         resetEditItemState\r\n//       }}\r\n//     >\r\n//       {children}\r\n//     </EditedItemContext.Provider>\r\n//   );\r\n// };\r\n\r\n// // This custom hook provides an easy way to consume the context in other components.\r\n// // This structure creates a reusable, global state management system using React's Context API.\r\n// // It allows components to access and modify shared state without prop drilling.\r\n// export const useItemContext = () => useContext(EditedItemContext);"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,iBAAiB,gBAAGN,aAAa,CAAC,CAAC;AAEzC,OAAO,MAAMO,kBAAkB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAElD,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC;IACzCW,IAAI,EAAE,CAAC,CAAC;IACRC,SAAS,EAAE,EAAE;IACbC,QAAQ,EAAE,CAAC;IACXC,UAAU,EAAE,KAAK;IACjBC,WAAW,EAAE,CAAC,CAAC;IACfC,QAAQ,EAAE,CAAC;EACb,CAAC,CAAC;EAEF,MAAMC,mBAAmB,GAAGA,CAACC,GAAG,EAAEC,KAAK,KAAK;IAC1CT,YAAY,CAAEU,SAAS,KAAM;MAC3B,GAAGA,SAAS;MACZ,CAACF,GAAG,GAAGC;IACT,CAAC,CAAC,CAAC;EACL,CAAC;EAED,MAAME,kBAAkB,GAAGA,CAAA,KAAM;IAC/BX,YAAY,CAAC;MACXC,IAAI,EAAE,CAAC,CAAC;MACRC,SAAS,EAAE,EAAE;MACbC,QAAQ,EAAE,CAAC;MACXC,UAAU,EAAE,KAAK;MACjBC,WAAW,EAAE,CAAC,CAAC;MACfC,QAAQ,EAAE,CAAC;IACb,CAAC,CAAC;EACJ,CAAC;EAED,oBACEZ,OAAA,CAACC,iBAAiB,CAACiB,QAAQ;IACzBH,KAAK,EAAE;MACLV,SAAS;MACTC,YAAY;MACZO,mBAAmB;MACnBI;IACF,CAAE;IAAAd,QAAA,EAEDA;EAAQ;IAAAgB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACiB,CAAC;AAEjC,CAAC;AAAClB,EAAA,CAzCWF,kBAAkB;AAAAqB,EAAA,GAAlBrB,kBAAkB;AA2C/B,OAAO,MAAMsB,cAAc,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAM5B,UAAU,CAACI,iBAAiB,CAAC;AAAA;;AAMjE;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAAwB,GAAA,CAnDaD,cAAc;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}