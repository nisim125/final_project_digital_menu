{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nisim\\\\Desktop\\\\digital_menu_front_and_back\\\\client\\\\src\\\\components\\\\FullMenu.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useRef } from 'react'\n// import CurrentMenu from './CurrentMenu';\n// import Menues from './Menues';\n// import { menu as fullMenu } from './restaurantMenu.ts';\n\n// function sendHttpGetRequest(url, callback) {\n//     let httpRequest = new XMLHttpRequest();\n//     httpRequest.onreadystatechange = () => {\n//         if (httpRequest.readyState == 4) {\n//             if (httpRequest.status == 200) {\n//                 callback(httpRequest.responseText);\n//             }\n//         }\n//     };\n//     httpRequest.open('GET', url, true);\n//     httpRequest.send();\n// }\n\n// export default function FullMenu(props) {\n\n//     const [menuToShow, setMenuToShow] = useState(0);\n\n//     // Create a ref to store the references to the menu sections\n//     const menuRefs = useRef([]);\n\n//     const handleSetMenu = (titleIndex) => {\n//         setMenuToShow(titleIndex);\n\n//         // Scroll to the selected menu\n//         if (menuRefs.current[titleIndex]) {\n//             menuRefs.current[titleIndex].scrollIntoView({ behavior: 'smooth', block: 'start' });\n//         }\n//     }\n\n//     const [value, setValue] = useState(\"no value\");\n\n//     let getValue = () => {\n//         sendHttpGetRequest('http://localhost:8080/api', (res) => {\n//             setValue(res);\n//             console.log('res: ', res)\n//         })\n//         console.log('get value is clicked: ', value)\n//     }\n\n//     return (\n//         <div id=\"full_menu_div\" className=\"horizontal_container\">\n//             <Menues titles={fullMenu.map(menu => menu.title)} indexToShow={menuToShow} chooseMenu={handleSetMenu}></Menues>\n\n//             <div id=\"full_menu\" className=\"vertical_container scrollbar\">\n// {/* ///////////////////////////////////////////////////////////////////////////////// */}\n//                 {/* <button onClick={() => { getValue() }}>im a button</button> */}\n\n//                 {\n//                     fullMenu.map((menu, index) => {\n//                         return (\n//                             <div\n//                                 style={{ display: 'flex', justifyContent: 'center' }}\n//                                 key={'divMenu' + index}\n//                                 // Store the ref for each menu\n//                                 ref={el => menuRefs.current[index] = el}\n//                             >\n//                                 <CurrentMenu\n//                                     key={menu.title}\n//                                     menuIndex={index}\n//                                     menu={menu}\n//                                     open={props.open}\n//                                     close={props.close} />\n//                             </div>\n//                         )\n//                     })\n//                 }\n\n//             </div>\n\n//         </div>\n//     )\n// }\n\nimport React, { useState, useEffect, Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function FullMenu(props) {\n  _s();\n  const [data, setData] = useState(null); // שמירת הנתונים שהתקבלו\n  const [loading, setLoading] = useState(true); // שמירה האם הטעינה מתבצעת\n  const [error, setError] = useState(null); // שמירה על הודעות שגיאה\n\n  useEffect(() => {\n    // קריאת ה-API באמצעות fetch\n    fetch('api/full_menu', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error('response was not ok');\n      }\n      return response.json(); // המרת התגובה ל-JSON\n    }).then(data => {\n      setData(data); // שמירת המידע שהתקבל\n      setLoading(false); // הפסקת מצב הטעינה\n    }).catch(error => {\n      setError(error.message); // שמירת הודעת השגיאה אם יש בעיה\n      setLoading(false); // הפסקת מצב הטעינה\n    });\n  }, []); // התלות הריקה [] מבטיחה שהאפקט ירוץ רק פעם אחת כשהקומפוננטה נטענת\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 16\n    }, this); // הודעה בזמן שהטעינה מתבצעת\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 16\n    }, this); // הצגת השגיאה אם קרתה\n  }\n  console.log(\"log data: \", data);\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"data is logged\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 12\n  }, this);\n}\n_s(FullMenu, \"RiL7vLwmC7ZWXKL/bXt2EIBjBYk=\");\n_c = FullMenu;\nvar _c;\n$RefreshReg$(_c, \"FullMenu\");","map":{"version":3,"names":["React","useState","useEffect","Component","jsxDEV","_jsxDEV","FullMenu","props","_s","data","setData","loading","setLoading","error","setError","fetch","method","headers","then","response","ok","Error","json","catch","message","children","fileName","_jsxFileName","lineNumber","columnNumber","console","log","_c","$RefreshReg$"],"sources":["C:/Users/nisim/Desktop/digital_menu_front_and_back/client/src/components/FullMenu.jsx"],"sourcesContent":["// import React, { useState, useRef } from 'react'\r\n// import CurrentMenu from './CurrentMenu';\r\n// import Menues from './Menues';\r\n// import { menu as fullMenu } from './restaurantMenu.ts';\r\n\r\n// function sendHttpGetRequest(url, callback) {\r\n//     let httpRequest = new XMLHttpRequest();\r\n//     httpRequest.onreadystatechange = () => {\r\n//         if (httpRequest.readyState == 4) {\r\n//             if (httpRequest.status == 200) {\r\n//                 callback(httpRequest.responseText);\r\n//             }\r\n//         }\r\n//     };\r\n//     httpRequest.open('GET', url, true);\r\n//     httpRequest.send();\r\n// }\r\n\r\n\r\n// export default function FullMenu(props) {\r\n\r\n//     const [menuToShow, setMenuToShow] = useState(0);\r\n\r\n//     // Create a ref to store the references to the menu sections\r\n//     const menuRefs = useRef([]);\r\n\r\n//     const handleSetMenu = (titleIndex) => {\r\n//         setMenuToShow(titleIndex);\r\n\r\n//         // Scroll to the selected menu\r\n//         if (menuRefs.current[titleIndex]) {\r\n//             menuRefs.current[titleIndex].scrollIntoView({ behavior: 'smooth', block: 'start' });\r\n//         }\r\n//     }\r\n\r\n//     const [value, setValue] = useState(\"no value\");\r\n\r\n//     let getValue = () => {\r\n//         sendHttpGetRequest('http://localhost:8080/api', (res) => {\r\n//             setValue(res);\r\n//             console.log('res: ', res)\r\n//         })\r\n//         console.log('get value is clicked: ', value)\r\n//     }\r\n\r\n//     return (\r\n//         <div id=\"full_menu_div\" className=\"horizontal_container\">\r\n//             <Menues titles={fullMenu.map(menu => menu.title)} indexToShow={menuToShow} chooseMenu={handleSetMenu}></Menues>\r\n\r\n//             <div id=\"full_menu\" className=\"vertical_container scrollbar\">\r\n// {/* ///////////////////////////////////////////////////////////////////////////////// */}\r\n//                 {/* <button onClick={() => { getValue() }}>im a button</button> */}\r\n\r\n//                 {\r\n//                     fullMenu.map((menu, index) => {\r\n//                         return (\r\n//                             <div\r\n//                                 style={{ display: 'flex', justifyContent: 'center' }}\r\n//                                 key={'divMenu' + index}\r\n//                                 // Store the ref for each menu\r\n//                                 ref={el => menuRefs.current[index] = el}\r\n//                             >\r\n//                                 <CurrentMenu\r\n//                                     key={menu.title}\r\n//                                     menuIndex={index}\r\n//                                     menu={menu}\r\n//                                     open={props.open}\r\n//                                     close={props.close} />\r\n//                             </div>\r\n//                         )\r\n//                     })\r\n//                 }\r\n\r\n//             </div>\r\n\r\n//         </div>\r\n//     )\r\n// }\r\n\r\nimport React, { useState, useEffect, Component } from 'react'\r\n\r\nexport default function FullMenu(props) {\r\n\r\n    const [data, setData] = useState(null); // שמירת הנתונים שהתקבלו\r\n    const [loading, setLoading] = useState(true); // שמירה האם הטעינה מתבצעת\r\n    const [error, setError] = useState(null); // שמירה על הודעות שגיאה\r\n\r\n    useEffect(() => {\r\n        // קריאת ה-API באמצעות fetch\r\n        fetch('api/full_menu', {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        })\r\n\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error('response was not ok');\r\n                }\r\n                return response.json(); // המרת התגובה ל-JSON\r\n            })\r\n\r\n            .then(data => {\r\n                setData(data); // שמירת המידע שהתקבל\r\n                setLoading(false); // הפסקת מצב הטעינה\r\n            })\r\n            .catch(error => {\r\n                setError(error.message); // שמירת הודעת השגיאה אם יש בעיה\r\n                setLoading(false); // הפסקת מצב הטעינה\r\n            });\r\n    }, []); // התלות הריקה [] מבטיחה שהאפקט ירוץ רק פעם אחת כשהקומפוננטה נטענת\r\n\r\n    if (loading) {\r\n        return <p>Loading...</p>; // הודעה בזמן שהטעינה מתבצעת\r\n    }\r\n\r\n    if (error) {\r\n        return <p>Error: {error}</p>; // הצגת השגיאה אם קרתה\r\n    }\r\n    console.log(\"log data: \", data);\r\n\r\n    return <p>data is logged</p>\r\n}"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,SAAS,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE7D,eAAe,SAASC,QAAQA,CAACC,KAAK,EAAE;EAAAC,EAAA;EAEpC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EACxC,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE1CC,SAAS,CAAC,MAAM;IACZ;IACAa,KAAK,CAAC,eAAe,EAAE;MACnBC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB;IACJ,CAAC,CAAC,CAEGC,IAAI,CAACC,QAAQ,IAAI;MACd,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;MAC1C;MACA,OAAOF,QAAQ,CAACG,IAAI,CAAC,CAAC,CAAC,CAAC;IAC5B,CAAC,CAAC,CAEDJ,IAAI,CAACT,IAAI,IAAI;MACVC,OAAO,CAACD,IAAI,CAAC,CAAC,CAAC;MACfG,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;IACvB,CAAC,CAAC,CACDW,KAAK,CAACV,KAAK,IAAI;MACZC,QAAQ,CAACD,KAAK,CAACW,OAAO,CAAC,CAAC,CAAC;MACzBZ,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;IACvB,CAAC,CAAC;EACV,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,IAAID,OAAO,EAAE;IACT,oBAAON,OAAA;MAAAoB,QAAA,EAAG;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,CAAC,CAAC;EAC9B;EAEA,IAAIhB,KAAK,EAAE;IACP,oBAAOR,OAAA;MAAAoB,QAAA,GAAG,SAAO,EAACZ,KAAK;IAAA;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,CAAC,CAAC;EAClC;EACAC,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEtB,IAAI,CAAC;EAE/B,oBAAOJ,OAAA;IAAAoB,QAAA,EAAG;EAAc;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC;AAChC;AAACrB,EAAA,CA1CuBF,QAAQ;AAAA0B,EAAA,GAAR1B,QAAQ;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}