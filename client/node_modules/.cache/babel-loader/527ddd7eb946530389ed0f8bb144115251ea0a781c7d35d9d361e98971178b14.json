{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nisim\\\\Desktop\\\\final_project_digital_menu\\\\client\\\\src\\\\components\\\\ChooseOption.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useItemContext } from './EditedItemContext.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChooseOption(props) {\n  _s();\n  const {\n    itemState,\n    updateEditItemState\n  } = useItemContext();\n  let sumAllChanges = 0;\n\n  // Corrected to prevent mutation of the state directly\n  function changePrice(extraPrice, iWantToAdd) {\n    if (!isNaN(extraPrice)) {\n      updateEditItemState('newPrice', itemState.newPrice + extraPrice * (iWantToAdd ? 1 : -1));\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"vertical_container\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"emphContent\",\n      children: [\" \\u05D1\\u05D7\\u05D9\\u05E8\\u05EA \", itemState.options[props.indexHeadOption].title, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this),\n    // Mapping over the options array\n    itemState.options[props.indexHeadOption].optionCollection.map((option, i) => {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        className: (option.isChecked ? \"checked_button\" : \"button\") + \" content\",\n        onClick: () => {\n          // create a copy of the optionsArray to avoid mutation\n          const optionsArray = [...itemState.options[props.indexHeadOption].optionCollection]; // copy array\n          const clickedOption = {\n            ...optionsArray[i]\n          }; // copy the clicked option\n\n          let countChecked = 0;\n\n          // handling multiple selection case\n          if (clickedOption.isMultiple) {\n            for (let j = 0; j < optionsArray.length; j++) {\n              if (optionsArray[j].isChecked) {\n                countChecked++;\n                if (!optionsArray[j].isMultiple) {\n                  countChecked--;\n                  optionsArray[j] = {\n                    ...optionsArray[j],\n                    isChecked: false\n                  }; // Avoid mutating the original\n                  changePrice(optionsArray[j].extraPrice, false);\n                }\n              }\n            }\n            if (clickedOption.isChecked && countChecked > 1) {\n              clickedOption.isChecked = false;\n              changePrice(clickedOption.extraPrice, false);\n            } else if (!clickedOption.isChecked) {\n              clickedOption.isChecked = true;\n              changePrice(clickedOption.extraPrice, true);\n            }\n          } else {\n            // Step 3: Handling single selection case\n            if (!clickedOption.isChecked) {\n              // Uncheck other options if single selection\n              for (let j = 0; j < optionsArray.length; j++) {\n                if (optionsArray[j] !== clickedOption && optionsArray[j].isChecked) {\n                  optionsArray[j] = {\n                    ...optionsArray[j],\n                    isChecked: false\n                  }; // Copy each item\n                  if (!isNaN(optionsArray[j].extraPrice)) sumAllChanges += optionsArray[j].extraPrice * -1;\n                }\n              }\n              clickedOption.isChecked = true;\n              if (!isNaN(clickedOption.extraPrice)) sumAllChanges += clickedOption.extraPrice;\n              changePrice(sumAllChanges, true);\n              sumAllChanges = 0;\n            }\n          }\n\n          // Step 4: Update the entire options array immutably\n          const updatedOptionsArray = optionsArray.map((opt, index) => index === i ? clickedOption : opt);\n\n          // Step 5: Update the state immutably, ensuring re-render\n          updateEditItemState(\"options\", itemState.options.map((opt, index) => index === props.indexHeadOption ? {\n            ...opt,\n            optionCollection: updatedOptionsArray\n          } : opt));\n        },\n        children: option.optionTitle\n      }, option.optionTitle, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 25\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this);\n}\n_s(ChooseOption, \"9koz3hWiwYkyb76nBVwglMPgtG4=\", false, function () {\n  return [useItemContext];\n});\n_c = ChooseOption;\nvar _c;\n$RefreshReg$(_c, \"ChooseOption\");","map":{"version":3,"names":["React","useItemContext","jsxDEV","_jsxDEV","ChooseOption","props","_s","itemState","updateEditItemState","sumAllChanges","changePrice","extraPrice","iWantToAdd","isNaN","newPrice","className","children","options","indexHeadOption","title","fileName","_jsxFileName","lineNumber","columnNumber","optionCollection","map","option","i","isChecked","onClick","optionsArray","clickedOption","countChecked","isMultiple","j","length","updatedOptionsArray","opt","index","optionTitle","_c","$RefreshReg$"],"sources":["C:/Users/nisim/Desktop/final_project_digital_menu/client/src/components/ChooseOption.jsx"],"sourcesContent":["import React from 'react';\r\nimport { useItemContext } from './EditedItemContext.jsx';\r\n\r\nexport default function ChooseOption(props) {\r\n\r\n    const { itemState, updateEditItemState } = useItemContext();\r\n\r\n    let sumAllChanges = 0;\r\n\r\n    // Corrected to prevent mutation of the state directly\r\n    function changePrice(extraPrice, iWantToAdd) {\r\n        if (!isNaN(extraPrice)) {\r\n            updateEditItemState('newPrice', itemState.newPrice + extraPrice * (iWantToAdd ? 1 : -1));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='vertical_container'>\r\n            <span className='emphContent'> בחירת {itemState.options[props.indexHeadOption].title} </span>\r\n            {\r\n                // Mapping over the options array\r\n                itemState.options[props.indexHeadOption].optionCollection.map((option, i) => {\r\n\r\n                    return (\r\n                        <button\r\n                            className={(option.isChecked ? \"checked_button\" : \"button\") + \" content\"}\r\n                            key={option.optionTitle}\r\n                            onClick={() => {\r\n\r\n                                // create a copy of the optionsArray to avoid mutation\r\n                                const optionsArray = [...itemState.options[props.indexHeadOption].optionCollection]; // copy array\r\n                                const clickedOption = { ...optionsArray[i] }; // copy the clicked option\r\n\r\n                                let countChecked = 0;\r\n\r\n                                // handling multiple selection case\r\n                                if (clickedOption.isMultiple) {\r\n                                    for (let j = 0; j < optionsArray.length; j++) {\r\n                                        if (optionsArray[j].isChecked) {\r\n                                            countChecked++;\r\n                                            if (!optionsArray[j].isMultiple) {\r\n                                                countChecked--;\r\n                                                optionsArray[j] = { ...optionsArray[j], isChecked: false }; // Avoid mutating the original\r\n                                                changePrice(optionsArray[j].extraPrice, false);\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                    if (clickedOption.isChecked && countChecked > 1) {\r\n                                        clickedOption.isChecked = false;\r\n                                        changePrice(clickedOption.extraPrice, false);\r\n                                    } else if (!clickedOption.isChecked) {\r\n                                        clickedOption.isChecked = true;\r\n                                        changePrice(clickedOption.extraPrice, true);\r\n                                    }\r\n                                } else { // Step 3: Handling single selection case\r\n                                    if (!clickedOption.isChecked) {\r\n                                        // Uncheck other options if single selection\r\n                                        for (let j = 0; j < optionsArray.length; j++) {\r\n                                            if (optionsArray[j] !== clickedOption && optionsArray[j].isChecked) {\r\n                                                optionsArray[j] = { ...optionsArray[j], isChecked: false }; // Copy each item\r\n                                                if (!isNaN(optionsArray[j].extraPrice))\r\n                                                    sumAllChanges += optionsArray[j].extraPrice * -1;\r\n                                            }\r\n                                        }\r\n                                        clickedOption.isChecked = true;\r\n                                        if (!isNaN(clickedOption.extraPrice))\r\n                                            sumAllChanges += clickedOption.extraPrice;\r\n                                        changePrice(sumAllChanges, true);\r\n                                        sumAllChanges = 0;\r\n                                    }\r\n                                }\r\n\r\n                                // Step 4: Update the entire options array immutably\r\n                                const updatedOptionsArray = optionsArray.map((opt, index) =>\r\n                                    index === i ? clickedOption : opt\r\n                                );\r\n\r\n                                // Step 5: Update the state immutably, ensuring re-render\r\n                                updateEditItemState(\"options\",\r\n                                    itemState.options.map((opt, index) =>\r\n                                        index === props.indexHeadOption\r\n                                            ? { ...opt, optionCollection: updatedOptionsArray }\r\n                                            : opt\r\n                                    )\r\n                                );\r\n                            }}>\r\n                            {option.optionTitle}\r\n                        </button>\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}