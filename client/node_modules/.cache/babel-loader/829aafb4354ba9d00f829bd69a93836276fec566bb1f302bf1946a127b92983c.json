{"ast":null,"code":"import React,{createContext,useState,useContext,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const EditedItemContext=/*#__PURE__*/createContext();export const EditedItemProvider=_ref=>{let{children}=_ref;const[itemState,setItemState]=useState({item:{},menuTitle:\"\",quantity:1,isEditMode:false,indexInCart:-1,newPrice:-1});const updateEditItemState=(key,value)=>{setItemState(prevState=>({...prevState,[key]:value}));};const resetEditItemState=()=>{setItemState({item:{},menuTitle:\"\",quantity:1,isEditMode:false,indexInCart:-1,newPrice:-1});};return/*#__PURE__*/_jsx(EditedItemContext.Provider,{value:{itemState,setItemState,updateEditItemState,resetEditItemState},children:children});};export const useItemContext=()=>useContext(EditedItemContext);// // createContext: To create a new context object\n// // useState: For managing state within the context\n// // useContext: A hook to consume the context in other components\n// import React, { createContext, useState, useContext, useEffect } from 'react';\n// // creates a new context object.\n// // We'll use this to provide and consume the global state.\n// const EditedItemContext = createContext();\n// // This defines a component that will wrap your app and provide the context.\n// // It takes children as a prop, which will be the components wrapped by this provider.\n// export const EditedItemProvider = ({ children }) => {\n//   // Set up the state for the global context using the useState hook.\n//   // The initial state is an object with properties.\n//   const [itemState, setItemState] = useState({ item: {}, menuTitle: \"\", newPrice: -1, quantity: 1 , isEditMode:false});\n//   // This function allows updating a specific key in the global state.\n//   // It uses the spread operator to maintain existing state and only update the specified key.\n//   const updateEditItemState = (key, value) => {\n//     setItemState((prevState) => ({\n//       ...prevState,\n//       [key]: value,\n//     }));\n//   };\n//   const resetEditItemState = () => { setItemState({ item: {}, menuTitle: \"\", newPrice: -1, quantity: 1 , isEditMode:false}) };\n//   // This returns the context provider component, passing the state and update function as the context value.\n//   // The children prop allows this to wrap other components.\n//   return (\n//     <EditedItemContext.Provider\n//       value={{\n//         itemState,\n//         updateEditItemState,\n//         resetEditItemState\n//       }}\n//     >\n//       {children}\n//     </EditedItemContext.Provider>\n//   );\n// };\n// // This custom hook provides an easy way to consume the context in other components.\n// // This structure creates a reusable, global state management system using React's Context API.\n// // It allows components to access and modify shared state without prop drilling.\n// export const useItemContext = () => useContext(EditedItemContext);","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsx","_jsx","EditedItemContext","EditedItemProvider","_ref","children","itemState","setItemState","item","menuTitle","quantity","isEditMode","indexInCart","newPrice","updateEditItemState","key","value","prevState","resetEditItemState","Provider","useItemContext"],"sources":["C:/Users/nisim/Desktop/digital_menu_front_and_back/client/src/components/EditedItemContext.jsx"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\n\r\nconst EditedItemContext = createContext();\r\n\r\nexport const EditedItemProvider = ({ children }) => {\r\n\r\n  const [itemState, setItemState] = useState({\r\n    item: {},\r\n    menuTitle: \"\",\r\n    quantity: 1,\r\n    isEditMode: false,\r\n    indexInCart: -1,\r\n    newPrice: -1\r\n  });\r\n\r\n  const updateEditItemState = (key, value) => {\r\n    setItemState((prevState) => ({\r\n      ...prevState,\r\n      [key]: value,\r\n    }));\r\n  };\r\n\r\n  const resetEditItemState = () => {\r\n    setItemState({\r\n      item: {},\r\n      menuTitle: \"\",\r\n      quantity: 1,\r\n      isEditMode: false,\r\n      indexInCart: -1,\r\n      newPrice: -1\r\n    })\r\n  };\r\n\r\n  return (\r\n    <EditedItemContext.Provider\r\n      value={{\r\n        itemState,\r\n        setItemState,\r\n        updateEditItemState,\r\n        resetEditItemState\r\n      }}\r\n    >\r\n      {children}\r\n    </EditedItemContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useItemContext = () => useContext(EditedItemContext);\r\n\r\n\r\n\r\n\r\n\r\n// // createContext: To create a new context object\r\n// // useState: For managing state within the context\r\n// // useContext: A hook to consume the context in other components\r\n// import React, { createContext, useState, useContext, useEffect } from 'react';\r\n\r\n// // creates a new context object.\r\n// // We'll use this to provide and consume the global state.\r\n// const EditedItemContext = createContext();\r\n\r\n// // This defines a component that will wrap your app and provide the context.\r\n// // It takes children as a prop, which will be the components wrapped by this provider.\r\n// export const EditedItemProvider = ({ children }) => {\r\n//   // Set up the state for the global context using the useState hook.\r\n//   // The initial state is an object with properties.\r\n//   const [itemState, setItemState] = useState({ item: {}, menuTitle: \"\", newPrice: -1, quantity: 1 , isEditMode:false});\r\n\r\n//   // This function allows updating a specific key in the global state.\r\n//   // It uses the spread operator to maintain existing state and only update the specified key.\r\n//   const updateEditItemState = (key, value) => {\r\n//     setItemState((prevState) => ({\r\n//       ...prevState,\r\n//       [key]: value,\r\n//     }));\r\n//   };\r\n\r\n//   const resetEditItemState = () => { setItemState({ item: {}, menuTitle: \"\", newPrice: -1, quantity: 1 , isEditMode:false}) };\r\n\r\n//   // This returns the context provider component, passing the state and update function as the context value.\r\n//   // The children prop allows this to wrap other components.\r\n//   return (\r\n//     <EditedItemContext.Provider\r\n//       value={{\r\n//         itemState,\r\n//         updateEditItemState,\r\n//         resetEditItemState\r\n//       }}\r\n//     >\r\n//       {children}\r\n//     </EditedItemContext.Provider>\r\n//   );\r\n// };\r\n\r\n// // This custom hook provides an easy way to consume the context in other components.\r\n// // This structure creates a reusable, global state management system using React's Context API.\r\n// // It allows components to access and modify shared state without prop drilling.\r\n// export const useItemContext = () => useContext(EditedItemContext);"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,QAAQ,CAAEC,UAAU,CAAEC,SAAS,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAE9E,KAAM,CAAAC,iBAAiB,cAAGN,aAAa,CAAC,CAAC,CAEzC,MAAO,MAAM,CAAAO,kBAAkB,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CAE7C,KAAM,CAACE,SAAS,CAAEC,YAAY,CAAC,CAAGV,QAAQ,CAAC,CACzCW,IAAI,CAAE,CAAC,CAAC,CACRC,SAAS,CAAE,EAAE,CACbC,QAAQ,CAAE,CAAC,CACXC,UAAU,CAAE,KAAK,CACjBC,WAAW,CAAE,CAAC,CAAC,CACfC,QAAQ,CAAE,CAAC,CACb,CAAC,CAAC,CAEF,KAAM,CAAAC,mBAAmB,CAAGA,CAACC,GAAG,CAAEC,KAAK,GAAK,CAC1CT,YAAY,CAAEU,SAAS,GAAM,CAC3B,GAAGA,SAAS,CACZ,CAACF,GAAG,EAAGC,KACT,CAAC,CAAC,CAAC,CACL,CAAC,CAED,KAAM,CAAAE,kBAAkB,CAAGA,CAAA,GAAM,CAC/BX,YAAY,CAAC,CACXC,IAAI,CAAE,CAAC,CAAC,CACRC,SAAS,CAAE,EAAE,CACbC,QAAQ,CAAE,CAAC,CACXC,UAAU,CAAE,KAAK,CACjBC,WAAW,CAAE,CAAC,CAAC,CACfC,QAAQ,CAAE,CAAC,CACb,CAAC,CAAC,CACJ,CAAC,CAED,mBACEZ,IAAA,CAACC,iBAAiB,CAACiB,QAAQ,EACzBH,KAAK,CAAE,CACLV,SAAS,CACTC,YAAY,CACZO,mBAAmB,CACnBI,kBACF,CAAE,CAAAb,QAAA,CAEDA,QAAQ,CACiB,CAAC,CAEjC,CAAC,CAED,MAAO,MAAM,CAAAe,cAAc,CAAGA,CAAA,GAAMtB,UAAU,CAACI,iBAAiB,CAAC,CAMjE;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}